
document.addEventListener('DOMContentLoaded', () => {
  // Get all DOM elements
  const counter = document.getElementById('counter');
  const minusBtn = document.getElementById('minus');
  const plusBtn = document.getElementById('plus');
  const heartBtn = document.getElementById('heart');
  const pauseBtn = document.getElementById('pause');
  const likesList = document.querySelector('.likes');
  const commentForm = document.getElementById('comment-form');
  const commentInput = document.getElementById('comment-input');
  const commentsList = document.querySelector('.comments');

  // Initialize variables
  let count = 0;
  let timer;
  let isPaused = false;
  const likes = {};

  // 1. Timer increments every second
  function startTimer() {
    timer = setInterval(() => {
      if (!isPaused) {
        count++;
        counter.textContent = count;
      }
    }, 1000);
  }

  // Start the timer when page loads
  startTimer();

  // 2. Manual increment/decrement buttons
  plusBtn.addEventListener('click', () => {
    count++;
    counter.textContent = count;
  });

  minusBtn.addEventListener('click', () => {
    count--;
    counter.textContent = count;
  });

  // 3. Like functionality
  heartBtn.addEventListener('click', () => {
    const currentNumber = count;
    
    // Initialize like count if it doesn't exist
    if (!likes[currentNumber]) {
      likes[currentNumber] = 0;
    }
    
    // Increment like count
    likes[currentNumber]++;
    
    // Update or create like display
    let likeItem = document.querySelector(`li[data-num="${currentNumber}"]`);
    
    if (likeItem) {
      likeItem.textContent = `${currentNumber} has been liked ${likes[currentNumber]} times`;
    } else {
      likeItem = document.createElement('li');
      likeItem.dataset.num = currentNumber;
      likeItem.textContent = `${currentNumber} has been liked ${likes[currentNumber]} time`;
      likesList.appendChild(likeItem);
    }
  });

  // 4. Pause/resume functionality
  pauseBtn.addEventListener('click', () => {
    isPaused = !isPaused;
    
    if (isPaused) {
      // Pause the counter
      clearInterval(timer);
      pauseBtn.textContent = 'resume';
      
      // Disable all buttons except pause
      const buttons = [minusBtn, plusBtn, heartBtn];
      buttons.forEach(button => {
        button.disabled = true;
      });
    } else {
      // Resume the counter
      startTimer();
      pauseBtn.textContent = 'pause';
      
      // Enable all buttons
      const buttons = [minusBtn, plusBtn, heartBtn];
      buttons.forEach(button => {
        button.disabled = false;
      });
    }
  });

  // 5. Comment functionality
  commentForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const commentText = commentInput.value.trim();
    
    if (commentText) {
      const commentElement = document.createElement('p');
      commentElement.textContent = commentText;
      commentsList.appendChild(commentElement);
      commentInput.value = '';
    }
  });
});